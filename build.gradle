plugins {
	id "com.crystaelix.loom" version "jitpack-ca3766c3"
	id "eclipse"
	id "idea"
	id "maven-publish"
	id "net.kyori.blossom" version "[1,2)"
	id "me.modmuss50.mod-publish-plugin" version "0.7.4"
}

repositories {
	// Add repositories to retrieve artifacts from in here.
	mavenCentral()
	flatDir {
		dirs "libs"
	}
	exclusiveContent {
		forRepository {
			maven {
				url = "https://maven.blamejared.com/"
			}
		}
		filter {
			includeGroup "mezz.jei"
		}
	}
	exclusiveContent {
		forRepository {
			maven {
				url = "https://cursemaven.com/"
			}
		}
		filter {
			includeGroup "curse.maven"
		}
	}
}

version = mod_version
group = mod_group
archivesBaseName = "${mod_name}-1.16.5"

java {
	toolchain.languageVersion = JavaLanguageVersion.of(8)
	withSourcesJar()
}

tasks.withType(JavaCompile).configureEach {
	options.encoding = "UTF-8"
}

loom {
	silentMojangMappingsLicense()
	legacyForge {
		// Uncomment the following line for mixin json configs.
		//mixinConfig "${mod_id}.mixins.json"
	}

	mixin.defaultRefmapName = "${mod_id}.refmap.json"
	interfaceInjection.enableDependencyInterfaceInjection = false
	runs {
		configureEach {
			property "fabric.log.console.level", "debug"
		}
		client {
			vmArg "-Xmx7G"
		}
		server {
			vmArg "-Xmx3G"
		}
	}
}

dependencies {
	// Use an updated version of log4j
	implementation "org.apache.logging.log4j:log4j-core:${log4j_version}"

	minecraft "com.mojang:minecraft:1.16.5"
	mappings loom.layered {
		mappings("de.oceanlabs.mcp:mcp_config:${mcp_version}@zip") {
			mappingPath "config/joined.tsrg"
			fallbackNamespaces "official", "named"
			mergeNamespace "official"
		}
		officialMojangMappings {
			skipClassNames = true
		}
		parchment "org.parchmentmc.data:parchment-1.16.5:${parchment_version}@zip"
	}
	forge "net.minecraftforge:forge:${forge_version}"

	// Example dependencies
	modImplementation "mezz.jei:jei-1.16.5:${jei_version}"
}

def replacements = [
	"0@VERSION@": version
]

blossom {
	replaceToken(replacements)
}

processResources {
	inputs.properties(replacements)
	filesMatching(["mcmod.info", "META-INF/mods.toml", "META-INF/neoforge.mods.toml"]) {
		filter {
			it.replace(replacements)
		}
	}
}

def manifestAttributes = [
	"Specification-Title": mod_name,
	"Specification-Vendor": mod_author,
	"Specification-Version": mod_spec_version,
	"Implementation-Title": archivesBaseName,
	"Implementation-Version": mod_version,
	"Implementation-Vendor": mod_author,
]

jar {
	manifest.attributes(manifestAttributes)
}

sourcesJar {
	manifest.attributes(manifestAttributes)
}

tasks.withType(net.fabricmc.loom.task.RunGameTask).configureEach {
	javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
}

// Please refer to Mod Publish Plugin's documentation on how to use the plugin to upload projects to CurseForge/Modrinth.
publishMods {
	file = remapJar.archiveFile
	version = displayName = "1.16.5-${mod_version}"
	changelog = file("changelog.md").text
	type = ALPHA
	modLoaders.add("forge")
	additionalFiles.from(remapSourcesJar.archiveFile)
}
